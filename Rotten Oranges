// I use bfs approach to solve this problem and We have to check minimum time where are oranges are rotten if it is impossible to rott all oranges then return -1.
class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<pair<int,int>,int>> q;
        int t=0;
        int vis[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    vis[i][j]=2;
                    q.push({{i,j},0});
                }
                else{
                    vis[i][j]=0;
                }
            }
        }
        
        int dx[]={0,0,-1,1};
        int dy[]={-1,1,0,0};
        while(!q.empty()){
            int r=q.front().first.first;
            int c=q.front().first.second;
            int tx=q.front().second;
            q.pop();
            t=max(t,tx);
            for(int i=0;i<4;i++){
                int newrow=r+dx[i];
                int newcol=c+dy[i];
                if(newrow>=0 && newcol>=0 && newrow<n && newcol<m
                && vis[newrow][newcol]!=2 && grid[newrow][newcol]==1){
                    q.push({{newrow,newcol},tx+1});
                    vis[newrow][newcol]=2;
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]!=2 && grid[i][j]==1){
                    return -1;
                }
            }
        }
        return t;
    }
};
