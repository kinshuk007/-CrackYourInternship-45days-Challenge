
//GeeksForGeeks question on Recursion backtracking

class Solution{
    public:
    
    void solve(int row,int col,vector<vector<int>> &vis,vector<vector<int>> &m,vector<string> &ans
    ,string temp,int n){
        
        if(row==n-1 && col==n-1){
            ans.push_back(temp);
            return ;
        }
        
        
        if (row + 1 < n && !vis[row + 1][col] && m[row + 1][col] == 1) {
      vis[row][col] = 1;
      solve(row + 1, col, vis, m, ans, temp + 'D', n);
      vis[row][col] = 0;
    }

    // left
    if (col - 1 >= 0 && !vis[row][col - 1] && m[row][col - 1] == 1) {
       vis[row][col] = 1;;
      solve(row, col - 1, vis, m, ans, temp + 'L', n);
      vis[row][col] = 0;
    }

    // right 
    if (col + 1 < n && !vis[row][col + 1] && m[row][col + 1] == 1) {
      vis[row][col] = 1;
      solve(row, col + 1, vis, m, ans, temp + 'R', n);
       vis[row][col] = 0;
    }

    // upward
    if (row - 1 >= 0 && !vis[row - 1][col] && m[row - 1][col] == 1) {
       vis[row][col] = 1;
      solve(row - 1, col, vis, m, ans, temp + 'U', n);
       vis[row][col] = 0;
    }
    
    }
    
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<vector<int>> vis(n,vector<int>(n,0));
        vector<string>  ans;
        if(m[0][0]==1) solve(0,0,vis,m,ans,"",n);
        return ans;
    }
};
