// Leetcode question 

---------------------APPROACH-1--------------------------------------
This uses extra space O(N) 

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        set<int> s;
        vector<int> v;
        for(int i=0;i<numbers.size();i++){
            if(s.find(target-numbers[i])!=s.end()){
                v.push_back(i);
                 int index=find(numbers.begin(),numbers.end(),target-numbers[i])-numbers.begin();
                 v.push_back(index);
                 break;
            }
            s.insert(numbers[i]);
        }
        for(int i=0;i<v.size();i++){
            v[i]=v[i]+1;
        }
        reverse(v.begin(),v.end());
        return v;
    }
};




--------------------------------APPROACH-2-------------------------------------

This is optimised approach because it is not uses extra spaces and faster as comapared to approach 1

class Solution {
public:
 vector<int> twoSum(vector<int>& numbers, int target) {
    
    int l = 0;
    int r = numbers.size() -1;
   
    while(l < r){
        if(numbers[l] + numbers[r] == target){
           
            return {l+1,r+1};;
        }
        else if(numbers[l] + numbers[r] > target){
            r--;
        }
        else{
            l++;
        }
    }
	return {};
}
};
