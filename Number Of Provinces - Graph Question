class Solution {
public:
void dfs(int i,vector<int> adjList[],vector<int> &visited){
      visited[i]=1;
      for(auto it: adjList[i]){
          if(!visited[it]){
              dfs(it,adjList,visited);
          }
      }
  }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int V=isConnected.size();
        vector<int> adjList[V];
        for(int i=0;i<V;i++)
        {
            for(int j=0;j<V;j++)
            {
                if(isConnected[i][j]==1 && i!=j)
                {
                    adjList[i].push_back(j);
                    adjList[j].push_back(i);
                }
            }
        }
        int cnt=0;
        vector<int> visited(V,0);
        for(int i=0;i<V;i++)
        {
            if(!visited[i]){
                cnt++;
                dfs(i,adjList,visited);
            }
        }
        return cnt;
    }
    
};
