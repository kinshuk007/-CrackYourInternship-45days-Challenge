//This is the bottom approach (memoisation) dp like we have to min(ladder(N-1),ladder(N-2)) and use recursion to find minimum at each step then after that return it.
class Solution {
public:
int f(vector<int> &dp,vector<int>&cost, int i){
      if(i<0) return 0;
      if (i==0 || i==1) return cost[i];
      if (dp[i] != -1)
        return dp[i];
      
       dp[i] = cost[i]+min(f(dp,cost,i-1),f(dp,cost,i-2));
       return dp[i];
  }
    int minCostClimbingStairs(vector<int>& cost) {
        int N=cost.size();
        vector<int> dp(N,-1);
        
        int res=min(f(dp,cost,N-1),f(dp,cost,N-2));
        return res;
    }
};
