// Leetcode Linkedlist question
------Approach-1--------
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        ListNode* temp=head;
        vector<int> v;
        while(temp!=NULL){
            v.push_back(temp->val);
            temp=temp->next;
        }
       
        int n=v.size();
        swap(v[k-1],v[n-k]);
         for(int i:v) cout<<i<<endl;
        ListNode* head1=new ListNode(0);
        ListNode* temp1=head1;
        for(int val:v){
             temp1->next=new ListNode(val);
           temp1=temp1->next;
        }
        return head1->next;
    }
};



------------------------------------------------------------------------------------------------

-------Approach-2 -------
----This is fast as compared to Approach 1 -----
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        ListNode *ptr1 = head, *ptr2 = head, *kth = NULL;
        while (--k)
            ptr1 = ptr1->next;
        
        kth = ptr1;
        
        ptr1 = ptr1->next;
        
        while (ptr1) {
          
            ptr1 = ptr1->next;
          
            ptr2 = ptr2->next;
            
        }
        swap(ptr2->val, kth->val);
        return head;
    }
};
