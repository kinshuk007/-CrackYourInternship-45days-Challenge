// LeetCode question with only four direction to check 

class Solution {
public:
    int DR[4]={1, 0, -1, 0};
    int DC[4]={0, -1, 0, 1};
void bfs(int row,int col,vector<vector<int>> &visited,vector<vector<char>> &grid)
  {
      visited[row][col]=1;
      queue<pair<int,int>> q;
      q.push({row,col});
      while(!q.empty()){
          int i=q.front().first;
          int j=q.front().second;
          q.pop();
          for(int k=0;k<4;k++){
             
                  int newrow=i+DR[k];
                  int newcol=j+DC[k];
                  if(newrow>=0 && newrow<grid.size() && newcol>=0 && newcol<grid[0].size()
                  && grid[newrow][newcol]=='1' && !visited[newrow][newcol])
                  {
                      visited[newrow][newcol]=1;
                      q.push({newrow,newcol});
                  }
              
          }
      }
  }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)
            {
                if(!visited[i][j] && grid[i][j]=='1'){
                    cnt++;
                    bfs(i,j,visited,grid);
                }
            }
        }
        return cnt;
    }
};


-----------------------------------------------------------------------------------------

// GeeksForGeeks for check in all 8-directions 


class Solution {
  public:
  void bfs(int row,int col,vector<vector<int>> &visited,vector<vector<char>> &grid)
  {
      visited[row][col]=1;
      queue<pair<int,int>> q;
      q.push({row,col});
      while(!q.empty()){
          int i=q.front().first;
          int j=q.front().second;
          q.pop();
          for(int delrow=-1;delrow<=1;delrow++){
              for(int delcol=-1;delcol<=1;delcol++){
                  int newrow=i+delrow;
                  int newcol=j+delcol;
                  if(newrow>=0 && newrow<grid.size() && newcol>=0 && newcol<grid[0].size()
                  && grid[newrow][newcol]=='1' && !visited[newrow][newcol])
                  {
                      visited[newrow][newcol]=1;
                      q.push({newrow,newcol});
                  }
              }
          }
      }
  }
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)
            {
                if(!visited[i][j] && grid[i][j]=='1'){
                    cnt++;
                    bfs(i,j,visited,grid);
                }
            }
        }
        return cnt;
    }
};
